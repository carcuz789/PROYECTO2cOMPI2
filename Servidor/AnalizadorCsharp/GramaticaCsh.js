/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaCsh = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,26],$V2=[1,27],$V3=[1,28],$V4=[1,29],$V5=[1,30],$V6=[1,25],$V7=[1,23],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,22],$Vd=[5,13,21,22,23,24,25,39,45,49,79,86,89,91],$Ve=[5,13,16,21,22,23,24,25,36,39,45,49,54,55,79,82,84,86,89,91],$Vf=[1,59],$Vg=[1,50],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,66],$Vs=[1,68],$Vt=[1,67],$Vu=[1,69],$Vv=[26,27,29],$Vw=[1,86],$Vx=[1,87],$Vy=[1,99],$Vz=[1,96],$VA=[1,88],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,92],$VF=[1,93],$VG=[1,94],$VH=[1,95],$VI=[1,97],$VJ=[1,98],$VK=[26,29,32,56,57,59,60,61,62,63,64,65,66,67,68,69,70,83],$VL=[1,104],$VM=[5,13,16,21,22,23,24,25,36,39,45,49,51,54,55,79,82,84,86,89,91],$VN=[26,32],$VO=[26,29,32,56,57,61,62,63,64,65,66,83],$VP=[26,29,32,56,57,60,61,62,63,64,65,66,67,68,69,83],$VQ=[1,186],$VR=[1,185],$VS=[1,193],$VT=[1,192],$VU=[82,84];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"S0":3,"S10":4,"EOF":5,"Sent1":6,"Sent2":7,"SIm":8,"Imp":9,"Scl":10,"S1":11,"class":12,"Identificador":13,"{":14,"Sent12":15,"}":16,"Var":17,"Tipo":18,"Lista_Id":19,"Var1":20,"int":21,"double":22,"bool":23,"char":24,"string":25,",":26,"=":27,"e":28,";":29,"Avar":30,"(":31,")":32,"Func":33,"Lista_Parametro":34,"Sent123":35,"return":36,"Var2":37,"Metodo":38,"void":39,"Sent113":40,"main":41,"LFunc":42,"Lista_E":43,"Imprimir":44,"Console":45,".":46,"Write":47,"IF":48,"if":49,"Sent11":50,"else":51,"ELS":52,"Senten":53,"break":54,"continue":55,"&&":56,"||":57,"!":58,"-":59,"*":60,"==":61,"!=":62,"<=":63,">=":64,"<":65,">":66,"^":67,"/":68,"%":69,"+":70,"CADENA":71,"CADENAHTML":72,"CARACTER":73,"ENTERO":74,"DECIMAL":75,"true":76,"false":77,"Swit":78,"switch":79,"Cas":80,"Def":81,"case":82,":":83,"default":84,"Whil":85,"while":86,"Sent111":87,"Do":88,"do":89,"Fo":90,"for":91,"Fo1":92,"Aum":93,"Sent112":94,"AUMETO":95,"DECREMENTO":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"Imp",12:"class",13:"Identificador",14:"{",16:"}",21:"int",22:"double",23:"bool",24:"char",25:"string",26:",",27:"=",29:";",31:"(",32:")",36:"return",39:"void",41:"main",45:"Console",46:".",47:"Write",49:"if",51:"else",54:"break",55:"continue",56:"&&",57:"||",58:"!",59:"-",60:"*",61:"==",62:"!=",63:"<=",64:">=",65:"<",66:">",67:"^",68:"/",69:"%",70:"+",71:"CADENA",72:"CADENAHTML",73:"CARACTER",74:"ENTERO",75:"DECIMAL",76:"true",77:"false",79:"switch",82:"case",83:":",84:"default",86:"while",89:"do",91:"for",95:"AUMETO",96:"DECREMENTO"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[4,1],[4,1],[8,1],[10,1],[11,4],[15,2],[15,1],[17,3],[18,1],[18,1],[18,1],[18,1],[18,1],[19,3],[19,1],[20,3],[20,1],[30,4],[30,4],[33,7],[33,6],[35,5],[35,5],[35,4],[35,2],[35,2],[35,1],[34,1],[37,4],[37,2],[38,7],[38,6],[38,6],[40,4],[40,4],[40,3],[40,2],[40,2],[40,1],[42,4],[43,3],[43,1],[44,7],[48,6],[48,9],[48,7],[48,10],[52,8],[52,7],[50,2],[50,2],[50,4],[50,4],[50,3],[50,1],[53,1],[53,1],[53,2],[53,1],[28,3],[28,3],[28,2],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[78,8],[80,5],[80,5],[80,4],[80,7],[80,7],[80,6],[80,3],[80,4],[80,4],[80,5],[80,6],[80,6],[81,5],[81,4],[81,3],[81,2],[85,6],[87,4],[87,4],[87,2],[87,2],[87,3],[87,1],[88,8],[90,10],[94,4],[94,4],[94,3],[94,2],[94,2],[94,1],[92,4],[92,3],[93,1],[93,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
    this.$=new Prueba.most($$[$0-1]); return this.$.mostr();
    

break;
case 2: case 4: case 10:
this.$=$$[$0-1]+" "+$$[$0];
break;
case 3: case 5: case 13: case 14: case 15: case 16: case 17: case 19: case 32: case 46: case 60: case 61: case 63:
this.$=$$[$0];
break;
case 6:
CErrores.Errores.add(new CNodoError.NodoError("Sintactico","No se esperaba el token: "+yytext,yylineno));
break;
case 7:
this.$="<ul><li>Import<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 8:
this.$="<ul><li>Clase<ul><li>"+$$[$0]+"</li></ul>";
break;
case 9:
this.$=$$[$0-3]+" "+ $$[$0-2]+" "+ $$[$0] ;
break;
case 11:
this.$="";
break;
case 12: case 18:
this.$=$$[$0-2]+" "+ $$[$0-1]+" "+ $$[$0];
break;
case 20:
this.$= $$[$0-1];
break;
case 22:
this.$=$$[$0-3]+" "+ $$[$0-2]+" "+ $$[$0-1];
break;
case 23:
this.$=$$[$0-3]+" "+ $$[$0-1]
break;
case 24:
this.$=$$[$0-6]+" "+ $$[$0-5]+" "+ $$[$0-4]+" "+ $$[$0-3] +" "+$$[$0-2]+" "+ $$[$0];
break;
case 25:
this.$=$$[$0-5]+" "+ $$[$0-4]+" "+ $$[$0-3]+" "+ $$[$0-2] +" "+ $$[$0];
break;
case 26: case 27:
this.$=$$[$0-4]+"<ul><li>Return<ul><li>"+$$[$0-3]+$$[$0-2]+"</li></ul></li></ul>";
break;
case 28:
this.$="<ul><li>Return<ul><li>"+$$[$0-3]+$$[$0-2]+"</li></ul></li></ul>";
break;
case 29: case 30: case 41: case 42: case 54: case 55: case 107: case 120: case 121:
this.$=$$[$0-1];
break;
case 33:
this.$=$$[$0-3]+" "+ $$[$0-2]+" "+ $$[$0-1]+" "+ $$[$0];
break;
case 34:
this.$=$$[$0-1]+" "+ $$[$0];
break;
case 35:
this.$="<ul><li>Identificador Metodo "+$$[$0-5]+"<ul><li>Parametros Metodo <ul><li>"+$$[$0-3]+"</li></ul></li></ul><ul><li>Cuerpo metodo "+$$[$0]+"</li></ul></li></ul>";
break;
case 36:
this.$="<ul><li>Main "+$$[$0-4]+"<ul><li>Cuerpo Main "+$$[$0]+"</li></ul></li></ul>";
break;
case 37:
this.$="<ul><li>Identificador Metodo "+$$[$0-4]+"<ul><li>Cuerpo Metodo "+$$[$0]+"</li></ul></li></ul>";
break;
case 38: case 39:
this.$=$$[$0-3]+"<ul><li>Return"+$$[$0-2]+"</li></ul>";
break;
case 40:
this.$="<ul><li>Return<ul><li> "+$$[$0-2]+"</li></ul></li></ul>";
break;
case 44: case 105:
this.$=$$[$0-3]+" "+ $$[$0-1];
break;
case 45:
this.$=$$[$0-2]+"  "+ $$[$0];
break;
case 47:
this.$="<ul><li>Tipo Imprimir "+$$[$0-2]+"</li></ul>"+"<ul><li>Sentencia a Imprimir"+$$[$0-2]+"</li></ul>";
break;
case 48:
this.$="<ul><li>Condicion If"+$$[$0-3]+"</li></ul><ul><li>Cuerpo If"+$$[$0]+"</li></ul>";
break;
case 49:
this.$="<ul><li>Condicion If"+$$[$0-6]+"</li></ul><ul><li>Cuerpo If"+$$[$0-3]+"</li></ul><ul><li>Cuerpo else"+$$[$0]+"</li></ul>";
break;
case 50:
this.$="<ul><li>Condicion If"+$$[$0-4]+"</li></ul><ul><li>Cuerpo If"+$$[$0-1]+"</li></ul>"+$$[$0];
break;
case 51:
this.$="<ul><li>Condicion If"+$$[$0-7]+"</li></ul><ul><li>Cuerpo If"+$$[$0-4]+"</li></ul>"+$$[$0-3]+"</li></ul><ul><li>Cuerpo else"+$$[$0]+"</li></ul>";
break;
case 52:
this.$=$$[$0-7]+"<ul><li>Declaracion Else If<ul><li>Condicion Else If"+$$[$0-3]+"</li></ul><ul><li>Cuerpo Else If"+$$[$0]+"</li></ul></li></ul>";
break;
case 53:
this.$="<ul><li>Declaracion Else If<ul><li>Condicion Else If"+$$[$0-3]+"</li></ul><ul><li>Cuerpo Else If"+$$[$0]+"</li></ul></li></ul>";
break;
case 56: case 57: case 109: case 110: case 117: case 118:
this.$=$$[$0-3]+"<ul><li>Sentencia<ul><li> "+$$[$0-2]+"</li></ul></li></ul>";
break;
case 58: case 113: case 119:
this.$="<ul><li>Sentencia<ul><li> "+$$[$0-2]+"</li></ul></li></ul>";
break;
case 62:
this.$=$$[$0-1]+$$[$0];
break;
case 64:
this.$ = "<ul><li>And"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 65:
this.$ = "<ul><li>Or"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 66:
this.$ = "<ul><li>Not<ul><li>"+$$[$0-1]+$$[$0]+"</li></ul></li></ul>";
break;
case 67:
this.$ = "<ul><li>Valor Negativo<ul><li>"+$$[$0-1]+$$[$0]+"</li></ul></li></ul>";
break;
case 68:
this.$ = "<ul><li>Menos Unitario<ul><li>"+$$[$0-2]+$$[$0-1]+$$[$0]+"</li></ul></li></ul>";
break;
case 69:
this.$ = "<ul><li>Parentesis<ul><li> "+$$[$0-1]+"</li></ul></li></ul>";
break;
case 70:
this.$ = "<ul><li>Igual Igual"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 71:
this.$ = "<ul><li>Distinto"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 72:
this.$ = "<ul><li>Menor Igual"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 73:
this.$ = "<ul><li>Mayor Igual"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 74:
this.$ = "<ul><li>Menor"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 75:
this.$ = "<ul><li>Mayor"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 76:
this.$ = "<ul><li>Potencia"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 77:
this.$ = "<ul><li>Division"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 78:
this.$ = "<ul><li>Multiplicacion"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 79:
this.$ = "<ul><li>Modulo"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 80:
this.$ = "<ul><li>Suma"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 81:
this.$ = "<ul><li>Resta"+$$[$0-2]+"<ul><li> "+$$[$0-1]+" "+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 82:
this.$ = "<ul><li>Cadena<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 83:
this.$ = "<ul><li>Cadenahtml<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 84:
this.$ = "<ul><li>Caracter<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 85:
this.$ = "<ul><li>Entero<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 86:
this.$ = "<ul><li>Decimal<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 87:
this.$ = "<ul><li>True<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 88:
this.$ = "<ul><li>False<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 89:
this.$ = "<ul><li>Llamada Funcion<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 90:
this.$ = "<ul><li>Identificador<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 91:
this.$="<ul><li>Condicion Switch "+$$[$0-5]+"</li></ul><ul><li>Cuerpo Switch "+$$[$0-2]+$$[$0-1]+"</li></ul>";
break;
case 92: case 93:
this.$=$$[$0-4]+"<ul><li>Condicion Case "+$$[$0-2]+"</li></ul><ul><li>Cuerpo Case "+$$[$0]+"</li></ul>";
break;
case 94:
this.$=$$[$0-3]+"<ul><li>Condicion Case "+$$[$0-1]+"</li></ul>";
break;
case 95: case 96:
this.$=$$[$0-6]+"<ul><li>Condicion Case "+$$[$0-4]+"</li></ul><ul><li>Cuerpo Case "+$$[$0-2]+"</li></ul><ul><li>Break "+$$[$0-1]+"</li></ul>";
break;
case 97:
this.$=$$[$0-5]+"<ul><li>Condicion Case "+$$[$0-3]+"</li></ul><ul><li>Break "+$$[$0-1]+"</li></ul>";
break;
case 98:
this.$="<ul><li>Condicion Case "+$$[$0-1]+"</li></ul>";
break;
case 99: case 100:
this.$="<ul><li>Condicion Case "+$$[$0-2]+"</li></ul><ul><li>Cuerpo Case "+$$[$0]+"</li></ul>";
break;
case 101:
this.$=$$[$0-4]+"<ul><li>Condicion Case "+$$[$0-3]+"</li></ul><ul><li>Break "+$$[$0-1]+"</li></ul>";
break;
case 102: case 103:
this.$="<ul><li>Condicion Case "+$$[$0-4]+"</li></ul><ul><li>Cuerpo Case "+$$[$0-2]+"</li></ul><ul><li>Break "+$$[$0-1]+"</li></ul>";
break;
case 104:
this.$=$$[$0-4]+" "+ $$[$0-2]+" "+ $$[$0-1];
break;
case 106: case 124:
this.$=$$[$0-2]+" "+ $$[$0];
break;
case 108:
this.$="<ul><li>Condicion While "+$$[$0-3]+"</li></ul><ul><li>Cuerpo While "+$$[$0]+"</li></ul>";
break;
case 111: case 112:
this.$=$$[$0-1]
break;
case 115:
this.$="<ul><li>Cuerpo Do "+ $$[$0-5]+" </li></ul><ul><li>"+ $$[$0-4]+"<ul><li>Condicion do while" + $$[$0-2]+"</li></ul></li></ul>";
break;
case 116:
this.$= "<ul><li>Asignacion "+ $$[$0-7]+"<ul><li>Condicion "+$$[$0-5]+"<ul><li>Aumento o Decremento "+$$[$0-3]+"</li></ul></li></ul></li></ul>"+"<ul><li>Cuerpo For"+$$[$0]+"</li></ul>";
break;
case 123:
this.$=$$[$0-3]+" "+ $$[$0-2]+" "+$$[$0];
break;
case 125:
this.$="<ul><li>Aumento "+$$[$0]+"</li></ul>";
break;
case 126:
this.$="<ul><li>Decremento "+$$[$0]+"</li></ul>";
break;
case 127:
this.$="<ul><li>Declaracion If <ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 128:
this.$="<ul><li>Declaracion Switch<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 129:
this.$="<ul><li>Declaracion While<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 130:
this.$="<ul><li>Declaracion Do<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 131:
this.$="<ul><li>Asignacion Funcion<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 132:
this.$ = "<ul><li>Declaracion For<ul><li>"+$$[$0]+"</li></ul></li></ul>";
break;
case 133:
this.$ = "<ul><li>Imprimir<ul><li>"+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 134:
this.$ = "<ul><li>Declaracion Funcion<ul><li>"+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 135:
this.$ = "<ul><li>Declaracion Metodo<ul><li>"+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 136:
this.$ = "<ul><li>Declaracion Variable<ul><li>"+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
case 137:
this.$ = "<ul><li>Asignacion Variable<ul><li>"+$$[$0]+"</li></ul></li></ul></li></ul>";
break;
}
},
table: [{2:[1,5],3:1,4:2,6:3,7:4,13:$V0,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},{1:[3]},{5:[1,31],6:32,7:33,13:$V0,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},o($Vd,[2,3]),o($Vd,[2,5]),o($Vd,[2,6]),o($Ve,[2,127]),o($Ve,[2,128]),o($Ve,[2,129]),o($Ve,[2,130]),o($Ve,[2,131]),o($Ve,[2,132]),o($Ve,[2,133]),o($Ve,[2,134]),o($Ve,[2,135]),o($Ve,[2,136]),o($Ve,[2,137]),{31:[1,34]},{31:[1,35]},{31:[1,36]},{14:[1,37]},{27:[1,39],31:[1,38]},{31:[1,40]},{46:[1,41]},{13:[1,42],19:43},{13:[1,44],41:[1,45]},{13:[2,13]},{13:[2,14]},{13:[2,15]},{13:[2,16]},{13:[2,17]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,4]),{13:$Vf,28:46,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:60,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:61,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{6:63,7:64,13:$V0,16:$Vr,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$Vs,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,50:62,53:65,54:$Vt,55:$Vu,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},{13:$Vf,28:72,31:$Vg,32:[1,71],42:58,43:70,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:73,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:[1,76],18:75,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,92:74},{47:[1,77]},o($Vv,[2,19],{31:[1,78]}),{20:79,26:[1,80],27:[1,81],29:[1,82]},{31:[1,83]},{31:[1,84]},{32:[1,85],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{13:$Vf,28:100,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:101,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{59:[1,102]},{13:$Vf,28:103,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($VK,[2,82]),o($VK,[2,83]),o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,86]),o($VK,[2,87]),o($VK,[2,88]),o($VK,[2,89]),o($VK,[2,90],{31:$VL}),{32:[1,105],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{32:[1,106],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{86:[1,107]},{16:[1,108],36:$Vs,53:109,54:$Vt,55:$Vu},{16:[1,110],36:$Vs,53:111,54:$Vt,55:$Vu},{29:[1,112]},o($VM,[2,59]),{29:[2,60]},{13:$Vf,28:113,29:[2,61],31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{29:[2,63]},{26:[1,115],32:[1,114]},{29:[1,116]},o($VN,[2,46],{56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ}),{29:[1,117],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{29:[1,118]},{13:[1,119]},{27:[1,120]},{31:[1,121]},{18:125,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,32:[1,123],34:122,37:124},o($Ve,[2,12]),{13:[1,126]},{13:$Vf,28:127,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($Ve,[2,21]),{18:125,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,32:[1,129],34:128,37:124},{32:[1,130]},{14:[1,131]},{13:$Vf,28:132,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:133,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:134,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:135,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:136,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:137,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:138,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:139,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:140,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:141,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:142,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:143,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:144,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:145,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($VO,[2,66],{59:$Vy,60:$Vz,67:$VG,68:$VH,69:$VI,70:$VJ}),o($VK,[2,67]),{13:$Vf,28:146,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{32:[1,147],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{13:$Vf,28:72,31:$Vg,42:58,43:70,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{14:[1,148]},{14:[1,149]},{31:[1,150]},o($VM,[2,54]),{29:[1,151]},o($VM,[2,55]),{29:[1,152]},{16:[1,153]},{29:[2,62],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},o([5,13,16,21,22,23,24,25,26,29,32,36,39,45,49,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,79,82,83,84,86,89,91],[2,44]),{13:$Vf,28:154,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($Ve,[2,22]),o($Ve,[2,23]),{13:$Vf,28:155,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{27:[1,156]},{13:$Vf,28:157,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{13:$Vf,28:158,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{32:[1,159]},{14:[1,160]},{26:[1,161],32:[2,32]},{13:[1,162]},o($Vv,[2,18]),{29:[1,163],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{32:[1,164]},{14:[1,165]},{14:[1,166]},{6:63,7:64,13:$V0,16:$Vr,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$Vs,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,50:167,53:65,54:$Vt,55:$Vu,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},o($VO,[2,64],{59:$Vy,60:$Vz,67:$VG,68:$VH,69:$VI,70:$VJ}),o($VO,[2,65],{59:$Vy,60:$Vz,67:$VG,68:$VH,69:$VI,70:$VJ}),o($VO,[2,70],{59:$Vy,60:$Vz,67:$VG,68:$VH,69:$VI,70:$VJ}),o($VO,[2,71],{59:$Vy,60:$Vz,67:$VG,68:$VH,69:$VI,70:$VJ}),o($VO,[2,72],{59:$Vy,60:$Vz,67:$VG,68:$VH,69:$VI,70:$VJ}),o($VO,[2,73],{59:$Vy,60:$Vz,67:$VG,68:$VH,69:$VI,70:$VJ}),o($VO,[2,74],{59:$Vy,60:$Vz,67:$VG,68:$VH,69:$VI,70:$VJ}),o($VO,[2,75],{59:$Vy,60:$Vz,67:$VG,68:$VH,69:$VI,70:$VJ}),o([26,29,32,56,57,61,62,63,64,65,66,67,83],[2,76],{59:$Vy,60:$Vz,68:$VH,69:$VI,70:$VJ}),o($VP,[2,77],{59:$Vy,70:$VJ}),o($VP,[2,78],{59:$Vy,70:$VJ}),o($VP,[2,79],{59:$Vy,70:$VJ}),o($VK,[2,80]),o($VK,[2,81]),o($VK,[2,68]),o($VK,[2,69]),{80:168,82:[1,169]},{6:171,7:172,13:$V0,16:[1,174],17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$Vs,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,53:173,54:$Vt,55:$Vu,78:7,79:$V9,85:8,86:$Va,87:170,88:9,89:$Vb,90:11,91:$Vc},{13:$Vf,28:175,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{16:[1,176]},{16:[1,177]},o($VM,[2,58]),o($VN,[2,45],{56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ}),{29:[1,178],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{13:$Vf,28:179,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{29:[2,124],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{32:[1,180],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{14:[1,181]},{6:183,7:184,13:$V0,16:$VQ,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,35:182,36:$VR,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},{18:187,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5},o($VN,[2,34]),o($Ve,[2,20]),{14:[1,188]},{6:190,7:191,13:$V0,16:$VS,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$VT,38:14,39:$V6,40:189,42:10,44:12,45:$V7,48:6,49:$V8,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},{6:190,7:191,13:$V0,16:$VS,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$VT,38:14,39:$V6,40:194,42:10,44:12,45:$V7,48:6,49:$V8,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},o($Ve,[2,48],{52:196,51:[1,195]}),{81:197,82:[1,198],84:[1,199]},{13:$Vf,28:200,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($Ve,[2,108]),{16:[1,202],36:$Vs,53:201,54:$Vt,55:$Vu},{16:[1,204],36:$Vs,53:203,54:$Vt,55:$Vu},{29:[1,205]},o($Ve,[2,114]),{32:[1,206],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},o($VM,[2,56]),o($VM,[2,57]),{93:207,95:[1,208],96:[1,209]},{29:[2,123],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{29:[1,210]},{6:183,7:184,13:$V0,16:$VQ,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,35:211,36:$VR,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},o($Ve,[2,25]),{16:[1,213],36:[1,212]},{16:[1,215],36:[1,214]},{13:$Vf,28:216,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($Ve,[2,31]),{13:[1,217]},{6:190,7:191,13:$V0,16:$VS,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$VT,38:14,39:$V6,40:218,42:10,44:12,45:$V7,48:6,49:$V8,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},o($Ve,[2,37]),{16:[1,220],36:[1,219]},{16:[1,222],36:[1,221]},{29:[1,223]},o($Ve,[2,43]),o($Ve,[2,36]),{14:[1,224],49:[1,225]},o($Ve,[2,50],{51:[1,226]}),{16:[1,227]},{13:$Vf,28:228,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{83:[1,229]},{56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,83:[1,230]},{29:[1,231]},o($Ve,[2,111]),{29:[1,232]},o($Ve,[2,112]),{16:[1,233]},{29:[1,234]},{32:[1,235]},{32:[2,125]},{32:[2,126]},o($Ve,[2,47]),o($Ve,[2,24]),{13:$Vf,28:236,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($Ve,[2,29]),{13:$Vf,28:237,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($Ve,[2,30]),{29:[1,238],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},o($VN,[2,33]),o($Ve,[2,35]),{29:[1,239]},o($Ve,[2,41]),{29:[1,240]},o($Ve,[2,42]),{16:[1,241]},{6:63,7:64,13:$V0,16:$Vr,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$Vs,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,50:242,53:65,54:$Vt,55:$Vu,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},{31:[1,243]},{14:[1,244],49:[1,245]},o($Ve,[2,91]),{56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,83:[1,246]},{6:247,13:[1,249],16:[2,107],42:10,48:6,49:$V8,54:[1,248],78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},o($VU,[2,98],{48:6,78:7,85:8,88:9,42:10,90:11,44:12,33:13,38:14,17:15,30:16,18:24,6:250,7:251,13:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,39:$V6,45:$V7,49:$V8,54:[1,252],79:$V9,86:$Va,89:$Vb,91:$Vc}),{16:[1,253]},{16:[1,254]},o($Ve,[2,113]),o($Ve,[2,115]),{14:[1,255]},{29:[1,256],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{29:[1,257],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{16:[1,258]},{16:[1,259]},{16:[1,260]},o($Ve,[2,40]),o($Ve,[2,49]),{13:$Vf,28:261,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},{6:63,7:64,13:$V0,16:$Vr,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$Vs,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,50:262,53:65,54:$Vt,55:$Vu,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},{31:[1,263]},o($VU,[2,94],{48:6,78:7,85:8,88:9,42:10,90:11,44:12,33:13,38:14,17:15,30:16,18:24,6:264,7:265,13:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,39:$V6,45:$V7,49:$V8,54:[1,266],79:$V9,86:$Va,89:$Vb,91:$Vc}),{16:[2,106],54:[1,267]},{29:[1,268]},{31:$VL},o($VU,[2,99],{54:[1,269]}),o($VU,[2,100],{54:[1,270]}),{29:[1,271]},o($Ve,[2,109]),o($Ve,[2,110]),{6:273,7:274,13:$V0,16:[1,276],17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$Vs,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,53:275,54:$Vt,55:$Vu,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc,94:272},{16:[1,277]},{16:[1,278]},o($Ve,[2,28]),o($Ve,[2,38]),o($Ve,[2,39]),{32:[1,279],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},o($Ve,[2,51]),{13:$Vf,28:280,31:$Vg,42:58,58:$Vh,59:$Vi,60:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq},o($VU,[2,92],{54:[1,281]}),o($VU,[2,93],{54:[1,282]}),{29:[1,283]},{29:[1,284]},{16:[2,105]},{29:[1,285]},{29:[1,286]},o($VU,[2,101]),o($Ve,[2,116]),{16:[1,288],36:$Vs,53:287,54:$Vt,55:$Vu},{16:[1,290],36:$Vs,53:289,54:$Vt,55:$Vu},{29:[1,291]},o($Ve,[2,122]),o($Ve,[2,26]),o($Ve,[2,27]),{14:[1,292]},{32:[1,293],56:$Vw,57:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ},{29:[1,294]},{29:[1,295]},o($VU,[2,97]),{16:[2,104]},o($VU,[2,102]),o($VU,[2,103]),{29:[1,296]},o($Ve,[2,120]),{29:[1,297]},o($Ve,[2,121]),{16:[1,298]},{6:63,7:64,13:$V0,16:$Vr,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$Vs,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,50:299,53:65,54:$Vt,55:$Vu,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},{14:[1,300]},o($VU,[2,95]),o($VU,[2,96]),{16:[1,301]},{16:[1,302]},o($Ve,[2,119]),o($VM,[2,53]),{6:63,7:64,13:$V0,16:$Vr,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,30:16,33:13,36:$Vs,38:14,39:$V6,42:10,44:12,45:$V7,48:6,49:$V8,50:303,53:65,54:$Vt,55:$Vu,78:7,79:$V9,85:8,86:$Va,88:9,89:$Vb,90:11,91:$Vc},o($Ve,[2,117]),o($Ve,[2,118]),o($VM,[2,52])],
defaultActions: {26:[2,13],27:[2,14],28:[2,15],29:[2,16],30:[2,17],31:[2,1],67:[2,60],69:[2,63],208:[2,125],209:[2,126],268:[2,105],284:[2,104]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    

    let Prueba=require('../CshAST/Mostrar');
    let Tok = require("../Token");
    var Tokens = new Array();
    let CErrores=require('../CshAST/Errores');
    let CNodoError=require('../CshAST/NodoError');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// alv los espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 59;
break;
case 4:return 70;
break;
case 5:return 67;
break;
case 6:return 31;
break;
case 7:return 32;
break;
case 8:return 60;
break;
case 9:return 68;
break;
case 10:return 21;
break;
case 11:return 22;
break;
case 12:return 23;
break;
case 13:return 24;
break;
case 14:return 25;
break;
case 15:return 26;
break;
case 16:return 12;
break;
case 17:return 14;
break;
case 18:return 16;
break;
case 19:return 29;
break;
case 20:return 39;
break;
case 21:return 41;
break;
case 22:return 45;
break;
case 23:return 46;
break;
case 24:return 47;
break;
case 25:return 69;
break;
case 26:return 83;
break;
case 27:return 54;
break;
case 28:return 84;
break;
case 29:return 82;
break;
case 30:return 86;
break;
case 31:return 89;
break;
case 32:return 61;
break;
case 33:return 62;
break;
case 34:return 64;
break;
case 35:return 63;
break;
case 36:return 56;
break;
case 37:return 57;
break;
case 38:return 58;
break;
case 39:return 66;
break;
case 40:return 65;
break;
case 41:return 27;
break;
case 42:return 49;
break;
case 43:return 51;
break;
case 44:return 'SALTO';
break;
case 45:return 76;
break;
case 46:return 77;
break;
case 47:return 91;
break;
case 48:return 55;
break;
case 49:return 36;
break;
case 50:return 79;
break;
case 51:return 'EAUMENTO';
break;
case 52:return 'DAUMENTO';
break;
case 53:return 'EDECREMENTO';
break;
case 54:return 'DDECREMENTO';
break;
case 55:return 75;
break;
case 56:return 74;
break;
case 57:return 95;
break;
case 58:return 96;
break;
case 59:return 73;
break;
case 60:return 71;
break;
case 61:return 72;
break;
case 62:return 13;
break;
case 63:CErrores.Errores.add(new CNodoError.NodoError("Lexico","No se esperaba el caracter: "+yy_.yytext,yy_.yylineno))
break;
case 64:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\/)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:bool\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:,)/,/^(?:class\b)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:Console\b)/,/^(?:\.)/,/^(?:Write\b)/,/^(?:%)/,/^(?::)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:[\n])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:switch\b)/,/^(?:[0-9]+.\+\+)/,/^(?:[0-9]+(\.[0-9]+).\+\+)/,/^(?:[0-9]+.--)/,/^(?:[0-9]+(\.[0-9]+).--)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:[0-9]+)/,/^(?:[A-Za-z|"_"]+[A-Za-z|0-9|"_"]*\+\+)/,/^(?:[A-Za-z|"_"]+[A-Za-z|0-9|"_"]*--)/,/^(?:[\']([^])[\'])/,/^(?:[\"]([^\"\n]|(\\|"))*[\"])/,/^(?:[\']([^\"\n]|(\\|'))*[\'])/,/^(?:[A-Za-z|"_"]+[A-Za-z|0-9|"_"]*)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaCsh;
exports.Parser = GramaticaCsh.Parser;
exports.parse = function () { return GramaticaCsh.parse.apply(GramaticaCsh, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}