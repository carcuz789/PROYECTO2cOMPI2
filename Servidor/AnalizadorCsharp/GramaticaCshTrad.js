/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaCshTrad = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,26],$V2=[1,27],$V3=[1,28],$V4=[1,29],$V5=[1,30],$V6=[1,25],$V7=[1,23],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,22],$Vd=[5,13,21,22,23,24,25,43,49,53,85,92,95,97],$Ve=[1,59],$Vf=[1,50],$Vg=[1,47],$Vh=[1,48],$Vi=[1,49],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,65],$Vr=[1,76],$Vs=[1,75],$Vt=[1,77],$Vu=[26,30,32],$Vv=[2,19],$Vw=[1,95],$Vx=[1,96],$Vy=[1,108],$Vz=[1,105],$VA=[1,97],$VB=[1,98],$VC=[1,99],$VD=[1,100],$VE=[1,101],$VF=[1,102],$VG=[1,103],$VH=[1,104],$VI=[1,106],$VJ=[1,107],$VK=[26,32,35,60,61,63,64,65,66,67,68,69,70,71,72,73,74,89],$VL=[1,113],$VM=[5,13,16,21,22,23,24,25,40,43,49,53,55,58,59,85,88,90,92,95,97],$VN=[13,16,21,22,23,24,25,40,49,53,58,59,85,88,90,92,95,97],$VO=[26,35],$VP=[5,13,16,21,22,23,24,25,40,43,49,53,58,59,85,88,90,92,95,97],$VQ=[26,32,35,60,61,65,66,67,68,69,70,89],$VR=[1,184],$VS=[1,175],$VT=[1,172],$VU=[1,173],$VV=[1,174],$VW=[1,176],$VX=[1,177],$VY=[1,178],$VZ=[1,179],$V_=[1,180],$V$=[1,181],$V01=[1,182],$V11=[26,32,35,60,61,64,65,66,67,68,69,70,71,72,73,89],$V21=[1,206],$V31=[1,207],$V41=[1,219],$V51=[1,216],$V61=[1,208],$V71=[1,209],$V81=[1,210],$V91=[1,211],$Va1=[1,212],$Vb1=[1,213],$Vc1=[1,214],$Vd1=[1,215],$Ve1=[1,217],$Vf1=[1,218],$Vg1=[32,35,60,61,63,64,65,66,67,68,69,70,71,72,73,74],$Vh1=[1,230],$Vi1=[1,229],$Vj1=[1,236],$Vk1=[1,235],$Vl1=[32,35,60,61,65,66,67,68,69,70],$Vm1=[32,35,60,61,64,65,66,67,68,69,70,71,72,73],$Vn1=[88,90];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"S0":3,"S10":4,"EOF":5,"Sent1":6,"Sent2":7,"SIm":8,"Imp":9,"Scl":10,"S1":11,"class":12,"Identificador":13,"{":14,"Sent12":15,"}":16,"Var":17,"Tipo":18,"Lista_Id":19,"Var1":20,"int":21,"double":22,"bool":23,"char":24,"string":25,",":26,"COMEENT":27,"COMMULT":28,"COMSIMP":29,"=":30,"e":31,";":32,"Avar":33,"(":34,")":35,"Func":36,"Lista_Parametro":37,"Sent123":38,"Sent1111":39,"return":40,"Var2":41,"Metodo":42,"void":43,"Sent113":44,"main":45,"LFunc":46,"Lista_E":47,"Imprimir":48,"Console":49,".":50,"Write":51,"IF":52,"if":53,"Sent11":54,"else":55,"ELS":56,"Senten":57,"break":58,"continue":59,"&&":60,"||":61,"!":62,"-":63,"*":64,"==":65,"!=":66,"<=":67,">=":68,"<":69,">":70,"^":71,"/":72,"%":73,"+":74,"CADENA":75,"CADENAHTML":76,"CARACTER":77,"ENTERO":78,"DECIMAL":79,"true":80,"false":81,"e2":82,"e8":83,"Swit":84,"switch":85,"Cas":86,"Def":87,"case":88,":":89,"default":90,"Whil":91,"while":92,"Sent111":93,"Do":94,"do":95,"Fo":96,"for":97,"Fo1":98,"Aum":99,"Sent112":100,"AUMETO":101,"DECREMENTO":102,"Sent2222":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"Imp",12:"class",13:"Identificador",14:"{",16:"}",21:"int",22:"double",23:"bool",24:"char",25:"string",26:",",28:"COMMULT",29:"COMSIMP",30:"=",32:";",34:"(",35:")",40:"return",43:"void",45:"main",49:"Console",50:".",51:"Write",53:"if",55:"else",58:"break",59:"continue",60:"&&",61:"||",62:"!",63:"-",64:"*",65:"==",66:"!=",67:"<=",68:">=",69:"<",70:">",71:"^",72:"/",73:"%",74:"+",75:"CADENA",76:"CADENAHTML",77:"CARACTER",78:"ENTERO",79:"DECIMAL",80:"true",81:"false",85:"switch",88:"case",89:":",90:"default",92:"while",95:"do",97:"for",101:"AUMETO",102:"DECREMENTO"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[4,1],[4,1],[8,1],[10,1],[11,4],[15,2],[15,1],[17,3],[18,1],[18,1],[18,1],[18,1],[18,1],[19,3],[19,1],[27,1],[27,1],[20,3],[20,1],[33,4],[33,4],[36,7],[36,6],[38,5],[38,4],[38,2],[38,1],[37,1],[41,4],[41,2],[42,7],[42,6],[42,6],[44,4],[44,3],[44,2],[44,1],[46,4],[47,3],[47,1],[48,7],[52,6],[52,9],[52,7],[52,10],[56,8],[56,7],[54,2],[54,4],[54,3],[54,1],[57,1],[57,1],[57,2],[57,1],[31,3],[31,3],[31,2],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[82,3],[82,3],[82,2],[82,2],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[83,3],[83,3],[83,2],[83,2],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[84,8],[86,5],[86,4],[86,7],[86,6],[86,3],[86,4],[86,5],[86,6],[87,5],[87,4],[87,3],[87,2],[91,6],[93,4],[93,2],[93,3],[93,1],[94,8],[96,10],[100,4],[100,3],[100,2],[100,1],[98,4],[98,3],[99,1],[99,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,2],[39,2],[39,2],[39,2],[39,2],[39,2],[39,2],[39,2],[39,2],[103,1],[103,1],[103,1],[103,1],[103,1],[103,2],[103,2],[103,2],[103,2],[103,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
    this.$=new Prueba.most($$[$0-1]); return this.$.mostr();
    

break;
case 2: case 4: case 189: case 190: case 191: case 192: case 193: case 194: case 195: case 196: case 197: case 203: case 204: case 205: case 206: case 207:
this.$=$$[$0-1]+" "+$$[$0];
break;
case 3: case 5: case 7: case 8: case 19: case 32: case 44: case 56: case 57: case 59: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178: case 179: case 180: case 181: case 182: case 183: case 184: case 185: case 186: case 187: case 188: case 198: case 199: case 200: case 201: case 202:
this.$=$$[$0];
break;
case 9:
this.$=$$[$0-3]+" "+ $$[$0-2]+" "+ $$[$0] ;
break;
case 10: case 30: case 40: case 52: case 156: case 163:
this.$=$$[$0-1];
break;
case 12: case 18:
this.$=$$[$0-2]+" "+ $$[$0-1]+" "+ $$[$0];
break;
case 13: case 14: case 15: case 16: case 17:
this.$="var";
break;
case 20:
this.$="\'\'\' \n"+$$[$0]+" \n \'\'\'";
break;
case 21:
this.$="#"+$$[$0];
break;
case 22:
this.$= "= "+$$[$0-1];
break;
case 23:
this.$=" ";
break;
case 24:
this.$="def "+ $$[$0-2]+" "+ $$[$0-1];
break;
case 25:
this.$=$$[$0-3]+" ="+ $$[$0-1];
break;
case 26:
this.$=$$[$0-6]+" "+ $$[$0-5]+" "+ $$[$0-4]+" "+ $$[$0-3] +" "+$$[$0-2]+" "+ $$[$0];
break;
case 27:
this.$=$$[$0-5]+" "+ $$[$0-4]+" "+ $$[$0-3]+" "+ $$[$0-2] +" "+ $$[$0];
break;
case 28:
this.$=$$[$0-4]+" return"+$$[$0-2];
break;
case 29: case 38: case 53: case 155: case 161:
this.$=$$[$0-3]+" "+$$[$0-2];
break;
case 31: case 41: case 164:
this.$="\n";
break;
case 33:
this.$=$$[$0-3]+" "+ $$[$0-2]+" "+ $$[$0-1]+" "+ $$[$0];
break;
case 34:
this.$=$$[$0-1]+" "+ $$[$0];
break;
case 35:
this.$="def "+$$[$0-5]+"("+$$[$0-3]+"): \n"+$$[$0];
break;
case 36:
this.$="def"+$$[$0-4]+" "+" ( ) :\n"+$$[$0]+" \n if name = \"main \" :main() \n";
break;
case 37:
this.$="def "+$$[$0-4]+" ( ) : \n"+$$[$0];
break;
case 39: case 54: case 157: case 162:
this.$=$$[$0-2];
break;
case 42:
this.$=$$[$0-3]+" "+ $$[$0-1];
break;
case 43:
this.$=$$[$0-2]+"  "+ $$[$0];
break;
case 45:
this.$="print("+$$[$0-2]+") \n";
break;
case 46:
this.$="if  "+$$[$0-3]+" : \n"+$$[$0];
break;
case 47:
this.$="if "+$$[$0-6]+": \n"+$$[$0-3]+"\n"+"else : \n"+$$[$0];
break;
case 48:
this.$="if "+$$[$0-4]+": \n"+$$[$0-1]+"\n"+$$[$0]+"\n";
break;
case 49:
this.$="if "+$$[$0-7]+": \n"+$$[$0-4]+"\n"+$$[$0-3]+"\n"+$$[$0-2]+": \n"+$$[$0];
break;
case 50:
this.$=$$[$0-7]+" "+" elif  "+$$[$0-3]+" : \n"+$$[$0];
break;
case 51:
this.$=" elif  "+$$[$0-3]+" : \n"+$$[$0];
break;
case 55:
this.$="\n ";
break;
case 58:
this.$=$$[$0-1]+$$[$0];
break;
case 60: case 87: case 114:
this.$=$$[$0-2]+" "+" and "+" "+$$[$0];
break;
case 61: case 88: case 115:
this.$=$$[$0-2]+" "+" or "+" "+$$[$0];
break;
case 62: case 89: case 116:
this.$=$$[$0-1]+" "+" not "+" "+$$[$01];
break;
case 63: case 117:
this.$=$$[$0-1]+" "+$$[$0]+" "+$$[$01];
break;
case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 131:
this.$=$$[$0-2]+" "+$$[$0-1]+" "+$$[$0];
break;
case 90:
this.$=$$[$01];
break;
case 130:
this.$=$$[$0-2]+" "+","+" "+$$[$0];
break;
case 141:
this.$="def switch  ("+$$[$0-5]+") : \n"+"switcher{"+$$[$0-2]+$$[$0-1]+"}";
break;
case 142:
this.$=$$[$0-2]+" :"+$$[$0];
break;
case 143:
this.$=$$[$0-1]+" :";
break;
case 144:
this.$=$$[$0-4]+" :"+$$[$0-2]+",\n";
break;
case 145:
this.$=$$[$0-3]+" :"+",\n";
break;
case 146:
this.$=$$[$0-1]+" : \n";
break;
case 147:
this.$=$$[$0-2]+" : \n"+$$[$0];
break;
case 148:
this.$=$$[$0-3]+" :  , \n";
break;
case 149:
this.$=$$[$0-4]+" : "+$$[$0-2]+",";
break;
case 150:
this.$=$$[$0-4]+" :"+ $$[$0-2]+" ,";
break;
case 151:
this.$=$$[$0-3]+": , ";
break;
case 152:
this.$=$$[$0-2]+" : "+ $$[$0];
break;
case 153:
this.$=$$[$0-1]+":";
break;
case 154:
this.$=$$[$0-5]+" "+$$[$0-3]+":\n"+$$[$0];
break;
case 159:
this.$="while True : \n"+$$[$0-5]+"if("+$$[$0-2]+"):/n break";
break;
case 160:
this.$=$$[$0-9]+" "+$$[$0-7]+","+$$[$0-5]+"): \n"+$$[$0];
break;
case 165:
this.$= $$[$0-2]+" in a range("+$$[$0];
break;
case 166:
this.$= $$[$0-2]+"in a range("+$$[$0];
break;
}
},
table: [{2:[1,5],3:1,4:2,6:3,7:4,13:$V0,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:16,36:13,42:14,43:$V6,46:10,48:12,49:$V7,52:6,53:$V8,84:7,85:$V9,91:8,92:$Va,94:9,95:$Vb,96:11,97:$Vc},{1:[3]},{5:[1,31],6:32,7:33,13:$V0,17:15,18:24,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:16,36:13,42:14,43:$V6,46:10,48:12,49:$V7,52:6,53:$V8,84:7,85:$V9,91:8,92:$Va,94:9,95:$Vb,96:11,97:$Vc},o($Vd,[2,3]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,169]),o($Vd,[2,170]),o($Vd,[2,171]),o($Vd,[2,172]),o($Vd,[2,173]),o($Vd,[2,174]),o($Vd,[2,175]),o($Vd,[2,176]),o($Vd,[2,177]),o($Vd,[2,178]),o($Vd,[2,179]),{34:[1,34]},{34:[1,35]},{34:[1,36]},{14:[1,37]},{30:[1,39],34:[1,38]},{34:[1,40]},{50:[1,41]},{13:[1,42],19:43},{13:[1,44],45:[1,45]},{13:[2,13]},{13:[2,14]},{13:[2,15]},{13:[2,16]},{13:[2,17]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,4]),{13:$Ve,31:46,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:60,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:61,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$V0,16:$Vq,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:63,40:$Vr,46:70,48:74,49:$V7,52:66,53:$V8,54:62,57:64,58:$Vs,59:$Vt,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},{13:$Ve,31:81,34:$Vf,35:[1,80],46:58,47:79,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:82,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:[1,85],18:84,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,98:83},{51:[1,86]},o($Vu,$Vv,{34:[1,87]}),{20:88,26:[1,89],30:[1,90],32:[1,91]},{34:[1,92]},{34:[1,93]},{35:[1,94],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{13:$Ve,31:109,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:110,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{63:[1,111]},{13:$Ve,31:112,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($VK,[2,78]),o($VK,[2,79]),o($VK,[2,80]),o($VK,[2,81]),o($VK,[2,82]),o($VK,[2,83]),o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,86],{34:$VL}),{35:[1,114],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{35:[1,115],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{92:[1,116]},{13:$V0,16:[1,117],17:127,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:126,40:$Vr,46:123,48:125,49:$V7,52:119,53:$V8,57:118,58:$Vs,59:$Vt,84:120,85:$V9,91:121,92:$Va,94:122,95:$Vb,96:124,97:$Vc},{32:[1,128]},o($VM,[2,55]),o($VN,[2,180]),o($VN,[2,181]),o($VN,[2,182]),o($VN,[2,183]),o($VN,[2,184]),o($VN,[2,185]),o($VN,[2,186]),o($VN,[2,187]),o($VN,[2,188]),{32:[2,56]},{13:$Ve,31:129,32:[2,57],34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{32:[2,59]},{13:[1,130],19:43},{26:[1,132],35:[1,131]},{32:[1,133]},o($VO,[2,44],{60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{32:[1,134],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{32:[1,135]},{13:[1,136]},{30:[1,137]},{34:[1,138]},{18:142,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,35:[1,140],37:139,41:141},o($VP,[2,12]),{13:[1,143]},{13:$Ve,31:144,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($VP,[2,23]),{18:142,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,35:[1,146],37:145,41:141},{35:[1,147]},{14:[1,148]},{13:$Ve,31:149,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:150,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:151,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:152,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:153,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:154,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:155,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:156,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:157,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:158,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:159,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:160,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:161,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$Ve,31:162,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($VQ,[2,62],{63:$Vy,64:$Vz,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VK,[2,63]),{13:$Ve,31:163,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{35:[1,164],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{13:$Ve,31:81,34:$Vf,46:58,47:79,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{14:[1,165]},{14:[1,166]},{34:[1,167]},o($VM,[2,52]),{32:[1,168]},o($VN,[2,189]),o($VN,[2,190]),o($VN,[2,191]),o($VN,[2,192]),o($VN,[2,193]),o($VN,[2,194]),o($VN,[2,195]),o($VN,[2,196]),o($VN,[2,197]),{16:[1,169]},{32:[2,58],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},o($Vu,$Vv),o([5,13,16,21,22,23,24,25,26,32,35,40,43,49,53,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,85,88,89,90,92,95,97],[2,42]),{13:$Ve,31:170,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($VP,[2,24]),o($VP,[2,25]),{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:171},{30:[1,185]},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:186},{13:$Ve,31:187,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{35:[1,188]},{14:[1,189]},{26:[1,190],35:[2,32]},{13:[1,191]},o($Vu,[2,18]),{32:[1,192],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{35:[1,193]},{14:[1,194]},{14:[1,195]},{13:$V0,16:$Vq,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:63,40:$Vr,46:70,48:74,49:$V7,52:66,53:$V8,54:196,57:64,58:$Vs,59:$Vt,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},o($VQ,[2,60],{63:$Vy,64:$Vz,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VQ,[2,61],{63:$Vy,64:$Vz,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VQ,[2,66],{63:$Vy,64:$Vz,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VQ,[2,67],{63:$Vy,64:$Vz,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VQ,[2,68],{63:$Vy,64:$Vz,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VQ,[2,69],{63:$Vy,64:$Vz,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VQ,[2,70],{63:$Vy,64:$Vz,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VQ,[2,71],{63:$Vy,64:$Vz,71:$VG,72:$VH,73:$VI,74:$VJ}),o([26,32,35,60,61,65,66,67,68,69,70,71,89],[2,72],{63:$Vy,64:$Vz,72:$VH,73:$VI,74:$VJ}),o($V11,[2,73],{63:$Vy,74:$VJ}),o($V11,[2,74],{63:$Vy,74:$VJ}),o($V11,[2,75],{63:$Vy,74:$VJ}),o($VK,[2,76]),o($VK,[2,77]),o($VK,[2,64]),o($VK,[2,65]),{86:197,88:[1,198]},{13:$V0,16:[1,202],17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:200,40:$Vr,46:70,48:74,49:$V7,52:66,53:$V8,57:201,58:$Vs,59:$Vt,84:67,85:$V9,91:68,92:$Va,93:199,94:69,95:$Vb,96:71,97:$Vc},{13:$Ve,31:203,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{16:[1,204]},o($VM,[2,54]),o($VO,[2,43],{60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{32:[1,205],60:$V21,61:$V31,63:$V41,64:$V51,65:$V61,66:$V71,67:$V81,68:$V91,69:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:220},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:221},{63:[1,222]},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:223},o($Vg1,[2,105]),o($Vg1,[2,106]),o($Vg1,[2,107]),o($Vg1,[2,108]),o($Vg1,[2,109]),o($Vg1,[2,110]),o($Vg1,[2,111]),o($Vg1,[2,112]),o($Vg1,[2,113],{34:$VL}),{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:224},{32:[2,166],60:$V21,61:$V31,63:$V41,64:$V51,65:$V61,66:$V71,67:$V81,68:$V91,69:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1},{35:[1,225],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{14:[1,226]},{13:$V0,16:$Vh1,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,38:227,39:228,40:$Vi1,46:70,48:74,49:$V7,52:66,53:$V8,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},{18:231,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5},o($VO,[2,34]),o($VP,[2,22]),{14:[1,232]},{13:$V0,16:$Vj1,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:234,40:$Vk1,44:233,46:70,48:74,49:$V7,52:66,53:$V8,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},{13:$V0,16:$Vj1,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:234,40:$Vk1,44:237,46:70,48:74,49:$V7,52:66,53:$V8,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},o($VP,[2,46],{56:239,55:[1,238]}),{87:240,88:[1,241],90:[1,242]},{13:$Ve,31:243,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($VP,[2,154]),{13:$V0,16:[1,245],17:127,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:126,40:$Vr,46:123,48:125,49:$V7,52:119,53:$V8,57:244,58:$Vs,59:$Vt,84:120,85:$V9,91:121,92:$Va,94:122,95:$Vb,96:124,97:$Vc},{32:[1,246]},o($VP,[2,158]),{35:[1,247],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},o($VM,[2,53]),{99:248,101:[1,249],102:[1,250]},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:251},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:252},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:253},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:254},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:255},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:256},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:257},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:258},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:259},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:260},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:261},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:262},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:263},{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:264},o($Vl1,[2,89],{63:$V41,64:$V51,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1}),o($Vg1,[2,90]),{13:$VR,34:$VS,46:183,62:$VT,63:$VU,64:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:265},{35:[1,266],60:$V21,61:$V31,63:$V41,64:$V51,65:$V61,66:$V71,67:$V81,68:$V91,69:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1},{32:[2,165],60:$V21,61:$V31,63:$V41,64:$V51,65:$V61,66:$V71,67:$V81,68:$V91,69:$Va1,70:$Vb1,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1},{32:[1,267]},{13:$V0,16:$Vh1,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,38:268,39:228,40:$Vi1,46:70,48:74,49:$V7,52:66,53:$V8,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},o($Vd,[2,27]),{13:$V0,16:[1,270],17:127,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:126,40:[1,269],46:123,48:125,49:$V7,52:119,53:$V8,84:120,85:$V9,91:121,92:$Va,94:122,95:$Vb,96:124,97:$Vc},{13:$Ve,31:271,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($Vd,[2,31]),{13:[1,272]},{13:$V0,16:$Vj1,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:234,40:$Vk1,44:273,46:70,48:74,49:$V7,52:66,53:$V8,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},o($Vd,[2,37]),{13:$V0,16:[1,275],17:127,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:126,40:[1,274],46:123,48:125,49:$V7,52:119,53:$V8,84:120,85:$V9,91:121,92:$Va,94:122,95:$Vb,96:124,97:$Vc},{32:[1,276]},o($Vd,[2,41]),o($Vd,[2,36]),{14:[1,277],53:[1,278]},o($VP,[2,48],{55:[1,279]}),{16:[1,280]},{13:$Ve,31:281,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{89:[1,282]},{60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,89:[1,283]},{32:[1,284]},o($VP,[2,156]),{16:[1,285]},{32:[1,286]},{35:[1,287]},{35:[2,167]},{35:[2,168]},o($Vl1,[2,87],{63:$V41,64:$V51,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1}),o($Vl1,[2,88],{63:$V41,64:$V51,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1}),o($Vl1,[2,93],{63:$V41,64:$V51,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1}),o($Vl1,[2,94],{63:$V41,64:$V51,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1}),o($Vl1,[2,95],{63:$V41,64:$V51,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1}),o($Vl1,[2,96],{63:$V41,64:$V51,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1}),o($Vl1,[2,97],{63:$V41,64:$V51,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1}),o($Vl1,[2,98],{63:$V41,64:$V51,71:$Vc1,72:$Vd1,73:$Ve1,74:$Vf1}),o([32,35,60,61,65,66,67,68,69,70,71],[2,99],{63:$V41,64:$V51,72:$Vd1,73:$Ve1,74:$Vf1}),o($Vm1,[2,100],{63:$V41,74:$Vf1}),o($Vm1,[2,101],{63:$V41,74:$Vf1}),o($Vm1,[2,102],{63:$V41,74:$Vf1}),o($Vg1,[2,103]),o($Vg1,[2,104]),o($Vg1,[2,91]),o($Vg1,[2,92]),o($VP,[2,45]),o($Vd,[2,26]),{13:$Ve,31:288,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($Vd,[2,30]),{32:[1,289],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},o($VO,[2,33]),o($Vd,[2,35]),{32:[1,290]},o($Vd,[2,40]),{16:[1,291]},{13:$V0,16:$Vq,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:63,40:$Vr,46:70,48:74,49:$V7,52:66,53:$V8,54:292,57:64,58:$Vs,59:$Vt,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},{34:[1,293]},{14:[1,294],53:[1,295]},o($VP,[2,141]),{60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,89:[1,296]},{13:$V0,16:[2,153],17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:297,46:70,48:74,49:$V7,52:66,53:$V8,58:[1,298],84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},o($Vn1,[2,146],{52:66,84:67,91:68,94:69,46:70,96:71,17:72,33:73,48:74,18:78,39:299,13:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,49:$V7,53:$V8,58:[1,300],85:$V9,92:$Va,95:$Vb,97:$Vc}),{16:[1,301]},o($VP,[2,157]),o($VP,[2,159]),{14:[1,302]},{32:[1,303],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{16:[1,304]},{16:[1,305]},o($Vd,[2,39]),o($VP,[2,47]),{13:$Ve,31:306,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{13:$V0,16:$Vq,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:63,40:$Vr,46:70,48:74,49:$V7,52:66,53:$V8,54:307,57:64,58:$Vs,59:$Vt,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},{34:[1,308]},o($Vn1,[2,143],{52:66,84:67,91:68,94:69,46:70,96:71,17:72,33:73,48:74,18:78,39:309,13:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,49:$V7,53:$V8,58:[1,310],85:$V9,92:$Va,95:$Vb,97:$Vc}),{13:$V0,16:[2,152],17:127,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:126,46:123,48:125,49:$V7,52:119,53:$V8,58:[1,311],84:120,85:$V9,91:121,92:$Va,94:122,95:$Vb,96:124,97:$Vc},{32:[1,312]},o($Vn1,[2,147],{18:78,52:119,84:120,91:121,94:122,46:123,96:124,48:125,33:126,17:127,13:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,49:$V7,53:$V8,58:[1,313],85:$V9,92:$Va,95:$Vb,97:$Vc}),{32:[1,314]},o($VP,[2,155]),{13:$V0,16:[1,318],17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:316,40:$Vr,46:70,48:74,49:$V7,52:66,53:$V8,57:317,58:$Vs,59:$Vt,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc,100:315},{16:[1,319]},o($Vd,[2,29]),o($Vd,[2,38]),{35:[1,320],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},o($VP,[2,49]),{13:$Ve,31:321,34:$Vf,46:58,62:$Vg,63:$Vh,64:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($Vn1,[2,142],{18:78,52:119,84:120,91:121,94:122,46:123,96:124,48:125,33:126,17:127,13:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,49:$V7,53:$V8,58:[1,322],85:$V9,92:$Va,95:$Vb,97:$Vc}),{32:[1,323]},{32:[1,324]},{16:[2,151]},{32:[1,325]},o($Vn1,[2,148]),o($VP,[2,160]),{13:$V0,16:[1,327],17:127,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:126,40:$Vr,46:123,48:125,49:$V7,52:119,53:$V8,57:326,58:$Vs,59:$Vt,84:120,85:$V9,91:121,92:$Va,94:122,95:$Vb,96:124,97:$Vc},{32:[1,328]},o($VP,[2,164]),o($Vd,[2,28]),{14:[1,329]},{35:[1,330],60:$Vw,61:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{32:[1,331]},o($Vn1,[2,145]),{16:[2,150]},o($Vn1,[2,149]),{32:[1,332]},o($VP,[2,163]),{16:[1,333]},{13:$V0,16:$Vq,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:63,40:$Vr,46:70,48:74,49:$V7,52:66,53:$V8,54:334,57:64,58:$Vs,59:$Vt,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},{14:[1,335]},o($Vn1,[2,144]),{16:[1,336]},o($VP,[2,162]),o($VM,[2,51]),{13:$V0,16:$Vq,17:72,18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,33:73,39:63,40:$Vr,46:70,48:74,49:$V7,52:66,53:$V8,54:337,57:64,58:$Vs,59:$Vt,84:67,85:$V9,91:68,92:$Va,94:69,95:$Vb,96:71,97:$Vc},o($VP,[2,161]),o($VM,[2,50])],
defaultActions: {26:[2,13],27:[2,14],28:[2,15],29:[2,16],30:[2,17],31:[2,1],75:[2,56],77:[2,59],249:[2,167],250:[2,168],312:[2,151],324:[2,150]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let Prueba=require('../CshAST/Mostrar');
    let Tok = require("../Token");
    var Tokens = new Array();
    let CErrores=require('../CshAST/Errores');
    let CNodoError=require('../CshAST/NodoError');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// alv los espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 63;
break;
case 4:return 74;
break;
case 5:return 71;
break;
case 6:return 34;
break;
case 7:return 35;
break;
case 8:return 64;
break;
case 9:return 72;
break;
case 10:return 21;
break;
case 11:return 22;
break;
case 12:return 23;
break;
case 13:return 24;
break;
case 14:return 25;
break;
case 15:return 26;
break;
case 16:return 12;
break;
case 17:return 14;
break;
case 18:return 16;
break;
case 19:return 32;
break;
case 20:return 43;
break;
case 21:return 45;
break;
case 22:return 49;
break;
case 23:return 50;
break;
case 24:return 51;
break;
case 25:return 73;
break;
case 26:return 89;
break;
case 27:return 58;
break;
case 28:return 90;
break;
case 29:return 88;
break;
case 30:return 92;
break;
case 31:return 95;
break;
case 32:return 65;
break;
case 33:return 66;
break;
case 34:return 68;
break;
case 35:return 67;
break;
case 36:return 60;
break;
case 37:return 61;
break;
case 38:return 62;
break;
case 39:return 70;
break;
case 40:return 69;
break;
case 41:return 30;
break;
case 42:return 53;
break;
case 43:return 55;
break;
case 44:return 'SALTO';
break;
case 45:return 80;
break;
case 46:return 81;
break;
case 47:return 97;
break;
case 48:return 59;
break;
case 49:return 40;
break;
case 50:return 85;
break;
case 51:return 'EAUMENTO';
break;
case 52:return 'DAUMENTO';
break;
case 53:return 'EDECREMENTO';
break;
case 54:return 'DDECREMENTO';
break;
case 55:return 79;
break;
case 56:return 78;
break;
case 57:return 101;
break;
case 58:return 102;
break;
case 59:return 77;
break;
case 60:return 75;
break;
case 61:return 76;
break;
case 62:return 13;
break;
case 63:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\/)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:bool\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:,)/,/^(?:class\b)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:Console\b)/,/^(?:\.)/,/^(?:Write\b)/,/^(?:%)/,/^(?::)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:[\n])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:switch\b)/,/^(?:[0-9]+.\+\+)/,/^(?:[0-9]+(\.[0-9]+).\+\+)/,/^(?:[0-9]+.--)/,/^(?:[0-9]+(\.[0-9]+).--)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:[0-9]+)/,/^(?:[A-Za-z|"_"]+[A-Za-z|0-9|"_"]*\+\+)/,/^(?:[A-Za-z|"_"]+[A-Za-z|0-9|"_"]*--)/,/^(?:[\']([^])[\'])/,/^(?:[\"]([^\"\n]|(\\|"))*[\"])/,/^(?:[\']([^\'\n]|(\\|'))*[\'])/,/^(?:[A-Za-z|"_"]+[A-Za-z|0-9|"_"]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaCshTrad;
exports.Parser = GramaticaCshTrad.Parser;
exports.parse = function () { return GramaticaCshTrad.parse.apply(GramaticaCshTrad, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}