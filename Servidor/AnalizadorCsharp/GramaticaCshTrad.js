/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaCshTrad = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,29],$V2=[1,30],$V3=[1,31],$V4=[1,32],$V5=[1,33],$V6=[1,27],$V7=[1,28],$V8=[1,26],$V9=[1,24],$Va=[1,18],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,23],$Vf=[5,13,21,22,23,24,25,28,29,42,48,52,84,91,94,96],$Vg=[5,13,16,21,22,23,24,25,28,29,39,42,48,52,57,58,84,87,89,91,94,96],$Vh=[1,62],$Vi=[1,53],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[1,69],$Vu=[1,71],$Vv=[1,70],$Vw=[1,72],$Vx=[26,30,32],$Vy=[1,89],$Vz=[1,90],$VA=[1,102],$VB=[1,99],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,96],$VI=[1,97],$VJ=[1,98],$VK=[1,100],$VL=[1,101],$VM=[26,32,35,59,60,62,63,64,65,66,67,68,69,70,71,72,73,88],$VN=[1,107],$VO=[5,13,16,21,22,23,24,25,28,29,39,42,48,52,54,57,58,84,87,89,91,94,96],$VP=[26,35],$VQ=[26,32,35,59,60,64,65,66,67,68,69,88],$VR=[1,171],$VS=[1,162],$VT=[1,159],$VU=[1,160],$VV=[1,161],$VW=[1,163],$VX=[1,164],$VY=[1,165],$VZ=[1,166],$V_=[1,167],$V$=[1,168],$V01=[1,169],$V11=[26,32,35,59,60,63,64,65,66,67,68,69,70,71,72,88],$V21=[1,195],$V31=[1,196],$V41=[1,208],$V51=[1,205],$V61=[1,197],$V71=[1,198],$V81=[1,199],$V91=[1,200],$Va1=[1,201],$Vb1=[1,202],$Vc1=[1,203],$Vd1=[1,204],$Ve1=[1,206],$Vf1=[1,207],$Vg1=[32,35,59,60,62,63,64,65,66,67,68,69,70,71,72,73],$Vh1=[1,220],$Vi1=[1,218],$Vj1=[1,227],$Vk1=[1,226],$Vl1=[32,35,59,60,64,65,66,67,68,69],$Vm1=[32,35,59,60,63,64,65,66,67,68,69,70,71,72],$Vn1=[87,89];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"S0":3,"S10":4,"EOF":5,"Sent1":6,"Sent2":7,"SIm":8,"Imp":9,"Scl":10,"S1":11,"class":12,"Identificador":13,"{":14,"Sent12":15,"}":16,"Var":17,"Tipo":18,"Lista_Id":19,"Var1":20,"int":21,"double":22,"bool":23,"char":24,"string":25,",":26,"COMEENT":27,"COMMULT":28,"COMSIMP":29,"=":30,"e":31,";":32,"Avar":33,"(":34,")":35,"Func":36,"Lista_Parametro":37,"Sent123":38,"return":39,"Var2":40,"Metodo":41,"void":42,"Sent113":43,"main":44,"LFunc":45,"Lista_E":46,"Imprimir":47,"Console":48,".":49,"Write":50,"IF":51,"if":52,"Sent11":53,"else":54,"ELS":55,"Senten":56,"break":57,"continue":58,"&&":59,"||":60,"!":61,"-":62,"*":63,"==":64,"!=":65,"<=":66,">=":67,"<":68,">":69,"^":70,"/":71,"%":72,"+":73,"CADENA":74,"CADENAHTML":75,"CARACTER":76,"ENTERO":77,"DECIMAL":78,"true":79,"false":80,"e2":81,"e8":82,"Swit":83,"switch":84,"Cas":85,"Def":86,"case":87,":":88,"default":89,"Whil":90,"while":91,"Sent111":92,"Do":93,"do":94,"Fo":95,"for":96,"Fo1":97,"Aum":98,"Sent112":99,"AUMETO":100,"DECREMENTO":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"Imp",12:"class",13:"Identificador",14:"{",16:"}",21:"int",22:"double",23:"bool",24:"char",25:"string",26:",",28:"COMMULT",29:"COMSIMP",30:"=",32:";",34:"(",35:")",39:"return",42:"void",44:"main",48:"Console",49:".",50:"Write",52:"if",54:"else",57:"break",58:"continue",59:"&&",60:"||",61:"!",62:"-",63:"*",64:"==",65:"!=",66:"<=",67:">=",68:"<",69:">",70:"^",71:"/",72:"%",73:"+",74:"CADENA",75:"CADENAHTML",76:"CARACTER",77:"ENTERO",78:"DECIMAL",79:"true",80:"false",84:"switch",87:"case",88:":",89:"default",91:"while",94:"do",96:"for",100:"AUMETO",101:"DECREMENTO"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[4,1],[4,1],[8,1],[10,1],[11,4],[15,2],[15,1],[17,3],[18,1],[18,1],[18,1],[18,1],[18,1],[19,3],[19,1],[27,1],[27,1],[20,3],[20,1],[33,4],[33,4],[36,7],[36,6],[38,5],[38,4],[38,2],[38,5],[38,2],[38,1],[37,1],[40,4],[40,2],[41,7],[41,6],[41,6],[43,4],[43,4],[43,3],[43,2],[43,2],[43,1],[45,4],[46,3],[46,1],[47,7],[51,6],[51,9],[51,7],[51,10],[55,8],[55,7],[53,2],[53,2],[53,4],[53,4],[53,3],[53,1],[56,1],[56,1],[56,2],[56,1],[31,3],[31,3],[31,2],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[81,3],[81,3],[81,2],[81,2],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[82,3],[82,3],[82,2],[82,2],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[83,8],[85,5],[85,5],[85,4],[85,7],[85,7],[85,6],[85,3],[85,4],[85,4],[85,5],[85,6],[85,6],[86,5],[86,5],[86,4],[86,3],[86,3],[86,2],[90,6],[92,4],[92,2],[92,2],[92,3],[92,1],[93,8],[95,10],[99,4],[99,3],[99,2],[99,2],[99,1],[97,4],[97,3],[98,1],[98,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
    this.$=new Prueba.most($$[$0-1]); return this.$.mostr();
    

break;
case 2: case 4:
this.$=$$[$0-1]+" "+$$[$0];
break;
case 3: case 5: case 7: case 8: case 19: case 34: case 48: case 62: case 63: case 65: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 181: case 182: case 183: case 184: case 185: case 186: case 187: case 188: case 189: case 190: case 191: case 192: case 193: case 194:
this.$=$$[$0];
break;
case 6:
CErrores.Errores.add(new CNodoError.NodoError("Sintactico","No se esperaba el token: "+yytext,yylineno));
break;
case 9:
this.$=$$[$0-3]+" "+ $$[$0-2]+" "+ $$[$0] ;
break;
case 10: case 30: case 32: case 43: case 44: case 56: case 57: case 168: case 169: case 176: case 177:
this.$=$$[$0-1];
break;
case 12: case 18:
this.$=$$[$0-2]+" "+ $$[$0-1]+" "+ $$[$0];
break;
case 13: case 14: case 15: case 16: case 17:
this.$="var";
break;
case 20:
this.$="\'\'\' \n"+$$[$0]+" \n \'\'\'";
break;
case 21:
this.$="#"+$$[$0];
break;
case 22:
this.$= "= "+$$[$0-1];
break;
case 23: case 61:
this.$=" ";
break;
case 24:
this.$="def "+ $$[$0-2]+" "+ $$[$0-1];
break;
case 25:
this.$=$$[$0-3]+" ="+ $$[$0-1];
break;
case 26:
this.$=$$[$0-6]+" "+ $$[$0-5]+" "+ $$[$0-4]+" "+ $$[$0-3] +" "+$$[$0-2]+" "+ $$[$0];
break;
case 27:
this.$=$$[$0-5]+" "+ $$[$0-4]+" "+ $$[$0-3]+" "+ $$[$0-2] +" "+ $$[$0];
break;
case 28: case 31:
this.$=$$[$0-4]+" return"+$$[$0-2];
break;
case 29: case 40: case 41: case 58: case 59: case 167: case 174:
this.$=$$[$0-3]+" "+$$[$0-2];
break;
case 35:
this.$=$$[$0-3]+" "+ $$[$0-2]+" "+ $$[$0-1]+" "+ $$[$0];
break;
case 36:
this.$=$$[$0-1]+" "+ $$[$0];
break;
case 37:
this.$="def "+$$[$0-5]+"("+$$[$0-3]+"):";
break;
case 38:
this.$="def"+$$[$0-4]+" "+$$[$0-3]+" ( ) :"+"if name = \"main \" :main() \n";
break;
case 39:
this.$="def "+$$[$0-4]+" ( ) :";
break;
case 42: case 60: case 170: case 175:
this.$=$$[$0-2];
break;
case 46:
this.$=$$[$0-3]+" "+ $$[$0-1];
break;
case 47:
this.$=$$[$0-2]+"  "+ $$[$0];
break;
case 49:
this.$="print("+$$[$0-2]+")";
break;
case 50:
this.$="if  "+$$[$0-3]+" : \n"+$$[$0];
break;
case 51:
this.$="if "+$$[$0-6]+": \n"+$$[$0-3]+"\n"+"else : \n";
break;
case 52:
this.$="if "+$$[$0-4]+": \n"+$$[$0-1]+"\n"+$$[$0]+"\n";
break;
case 53:
this.$="if "+$$[$0-7]+": \n"+$$[$0-4]+"\n"+$$[$0-3]+"\n"+$$[$0-2];
break;
case 54:
this.$=$$[$0-7]+" "+" elif  "+$$[$0-3]+" : \n"+$$[$0];
break;
case 55:
this.$=" elif  "+$$[$0-3]+" : \n"+$$[$0];
break;
case 64:
this.$=$$[$0-1]+$$[$0];
break;
case 66: case 93: case 120:
this.$=$$[$0-2]+" "+" and "+" "+$$[$0];
break;
case 67: case 94: case 121:
this.$=$$[$0-2]+" "+" or "+" "+$$[$0];
break;
case 68: case 95: case 122:
this.$=$$[$0-1]+" "+" not "+" "+$$[$01];
break;
case 69: case 123:
this.$=$$[$0-1]+" "+$$[$0]+" "+$$[$01];
break;
case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 137:
this.$=$$[$0-2]+" "+$$[$0-1]+" "+$$[$0];
break;
case 96:
this.$=$$[$01];
break;
case 136:
this.$=$$[$0-2]+" "+","+" "+$$[$0];
break;
case 147:
this.$="def switch  ("+$$[$0-5]+") : \n"+"switcher{"+$$[$0-2]+$$[$0-1]+"}";
break;
case 148: case 149:
this.$=$$[$0-2]+" :"+$$[$0];
break;
case 150:
this.$=$$[$0-1]+" :";
break;
case 151: case 152:
this.$=$$[$0-4]+" :"+$$[$0-2]+",\n";
break;
case 153:
this.$=$$[$0-3]+" :"+",\n";
break;
case 154:
this.$=$$[$0-1]+" : \n";
break;
case 155: case 156:
this.$=$$[$0-2]+" : \n"+$$[$0];
break;
case 157:
this.$=$$[$0-3]+" :  , \n";
break;
case 158: case 159:
this.$=$$[$0-4]+" : "+$$[$0-2]+",";
break;
case 160: case 161:
this.$=$$[$0-4]+" :"+ $$[$0-2]+" ,";
break;
case 162:
this.$=$$[$0-3]+": , ";
break;
case 163: case 164:
this.$=$$[$0-2]+" : "+ $$[$0];
break;
case 165:
this.$=$$[$0-1]+":";
break;
case 166:
this.$=$$[$0-5]+" "+$$[$0-3]+":\n";
break;
case 172:
this.$="while True : \n"+$$[$0-5]+"if("+$$[$0-2]+"):/n break";
break;
case 173:
this.$=$$[$0-9]+" "+$$[$0-7]+","+$$[$0-5]+"): \n"+$$[$0];
break;
case 179: case 180:
this.$= $$[$0-2]+"in a range("+$$[$0];
break;
}
},
table: [{2:[1,5],3:1,4:2,6:3,7:4,13:$V0,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},{1:[3]},{5:[1,34],6:35,7:36,13:$V0,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},o($Vf,[2,3]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vg,[2,183]),o($Vg,[2,184]),o($Vg,[2,185]),o($Vg,[2,186]),o($Vg,[2,187]),o($Vg,[2,188]),o($Vg,[2,189]),o($Vg,[2,190]),o($Vg,[2,191]),o($Vg,[2,192]),o($Vg,[2,193]),o($Vg,[2,194]),{34:[1,37]},{34:[1,38]},{34:[1,39]},{14:[1,40]},{30:[1,42],34:[1,41]},{34:[1,43]},{49:[1,44]},{13:[1,45],19:46},{13:[1,47],44:[1,48]},o($Vg,[2,20]),o($Vg,[2,21]),{13:[2,13]},{13:[2,14]},{13:[2,15]},{13:[2,16]},{13:[2,17]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),{13:$Vh,31:49,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:63,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:64,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{6:66,7:67,13:$V0,16:$Vt,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vu,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,53:65,56:68,57:$Vv,58:$Vw,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},{13:$Vh,31:75,34:$Vi,35:[1,74],45:61,46:73,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:76,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:[1,79],18:78,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,97:77},{50:[1,80]},o($Vx,[2,19],{34:[1,81]}),{20:82,26:[1,83],30:[1,84],32:[1,85]},{34:[1,86]},{34:[1,87]},{35:[1,88],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{13:$Vh,31:103,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:104,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{62:[1,105]},{13:$Vh,31:106,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($VM,[2,84]),o($VM,[2,85]),o($VM,[2,86]),o($VM,[2,87]),o($VM,[2,88]),o($VM,[2,89]),o($VM,[2,90]),o($VM,[2,91]),o($VM,[2,92],{34:$VN}),{35:[1,108],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{35:[1,109],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{91:[1,110]},{16:[1,111],39:$Vu,56:112,57:$Vv,58:$Vw},{16:[1,113],39:$Vu,56:114,57:$Vv,58:$Vw},{32:[1,115]},o($VO,[2,61]),{32:[2,62]},{13:$Vh,31:116,32:[2,63],34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{32:[2,65]},{26:[1,118],35:[1,117]},{32:[1,119]},o($VP,[2,48],{59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL}),{32:[1,120],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{32:[1,121]},{13:[1,122]},{30:[1,123]},{34:[1,124]},{18:128,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,35:[1,126],37:125,40:127},o($Vg,[2,12]),{13:[1,129]},{13:$Vh,31:130,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($Vg,[2,23]),{18:128,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,35:[1,132],37:131,40:127},{35:[1,133]},{14:[1,134]},{13:$Vh,31:135,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:136,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:137,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:138,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:139,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:140,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:141,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:142,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:143,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:144,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:145,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:146,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:147,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{13:$Vh,31:148,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($VQ,[2,68],{62:$VA,63:$VB,70:$VI,71:$VJ,72:$VK,73:$VL}),o($VM,[2,69]),{13:$Vh,31:149,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{35:[1,150],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{13:$Vh,31:75,34:$Vi,45:61,46:73,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{14:[1,151]},{14:[1,152]},{34:[1,153]},o($VO,[2,56]),{32:[1,154]},o($VO,[2,57]),{32:[1,155]},{16:[1,156]},{32:[2,64],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},o([5,13,16,21,22,23,24,25,26,28,29,32,35,39,42,48,52,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,84,87,88,89,91,94,96],[2,46]),{13:$Vh,31:157,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($Vg,[2,24]),o($Vg,[2,25]),{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:158},{30:[1,172]},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:173},{13:$Vh,31:174,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{35:[1,175]},{14:[1,176]},{26:[1,177],35:[2,34]},{13:[1,178]},o($Vx,[2,18]),{32:[1,179],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{35:[1,180]},{14:[1,181]},{14:[1,182]},{6:66,7:67,13:$V0,16:$Vt,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vu,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,53:183,56:68,57:$Vv,58:$Vw,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},o($VQ,[2,66],{62:$VA,63:$VB,70:$VI,71:$VJ,72:$VK,73:$VL}),o($VQ,[2,67],{62:$VA,63:$VB,70:$VI,71:$VJ,72:$VK,73:$VL}),o($VQ,[2,72],{62:$VA,63:$VB,70:$VI,71:$VJ,72:$VK,73:$VL}),o($VQ,[2,73],{62:$VA,63:$VB,70:$VI,71:$VJ,72:$VK,73:$VL}),o($VQ,[2,74],{62:$VA,63:$VB,70:$VI,71:$VJ,72:$VK,73:$VL}),o($VQ,[2,75],{62:$VA,63:$VB,70:$VI,71:$VJ,72:$VK,73:$VL}),o($VQ,[2,76],{62:$VA,63:$VB,70:$VI,71:$VJ,72:$VK,73:$VL}),o($VQ,[2,77],{62:$VA,63:$VB,70:$VI,71:$VJ,72:$VK,73:$VL}),o([26,32,35,59,60,64,65,66,67,68,69,70,88],[2,78],{62:$VA,63:$VB,71:$VJ,72:$VK,73:$VL}),o($V11,[2,79],{62:$VA,73:$VL}),o($V11,[2,80],{62:$VA,73:$VL}),o($V11,[2,81],{62:$VA,73:$VL}),o($VM,[2,82]),o($VM,[2,83]),o($VM,[2,70]),o($VM,[2,71]),{85:184,87:[1,185]},{6:187,7:188,13:$V0,16:[1,190],17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vu,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,56:189,57:$Vv,58:$Vw,83:7,84:$Vb,90:8,91:$Vc,92:186,93:9,94:$Vd,95:11,96:$Ve},{13:$Vh,31:191,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{16:[1,192]},{16:[1,193]},o($VO,[2,60]),o($VP,[2,47],{59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL}),{32:[1,194],59:$V21,60:$V31,62:$V41,63:$V51,64:$V61,65:$V71,66:$V81,67:$V91,68:$Va1,69:$Vb1,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:209},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:210},{62:[1,211]},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:212},o($Vg1,[2,111]),o($Vg1,[2,112]),o($Vg1,[2,113]),o($Vg1,[2,114]),o($Vg1,[2,115]),o($Vg1,[2,116]),o($Vg1,[2,117]),o($Vg1,[2,118]),o($Vg1,[2,119],{34:$VN}),{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:213},{32:[2,180],59:$V21,60:$V31,62:$V41,63:$V51,64:$V61,65:$V71,66:$V81,67:$V91,68:$Va1,69:$Vb1,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1},{35:[1,214],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{14:[1,215]},{6:217,7:219,13:$V0,16:$Vh1,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,38:216,39:$Vi1,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},{18:221,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5},o($VP,[2,36]),o($Vg,[2,22]),{14:[1,222]},{6:224,7:225,13:$V0,16:$Vj1,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vk1,41:14,42:$V8,43:223,45:10,47:12,48:$V9,51:6,52:$Va,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},{6:224,7:225,13:$V0,16:$Vj1,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vk1,41:14,42:$V8,43:228,45:10,47:12,48:$V9,51:6,52:$Va,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},o($Vg,[2,50],{55:230,54:[1,229]}),{86:231,87:[1,232],89:[1,233]},{13:$Vh,31:234,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($Vg,[2,166]),{16:[1,236],39:$Vu,56:235,57:$Vv,58:$Vw},{16:[1,237]},{32:[1,238]},o($Vg,[2,171]),{35:[1,239],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},o($VO,[2,58]),o($VO,[2,59]),{98:240,100:[1,241],101:[1,242]},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:243},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:244},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:245},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:246},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:247},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:248},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:249},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:250},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:251},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:252},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:253},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:254},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:255},{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:256},o($Vl1,[2,95],{62:$V41,63:$V51,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1}),o($Vg1,[2,96]),{13:$VR,34:$VS,45:170,61:$VT,62:$VU,63:$VV,74:$VW,75:$VX,76:$VY,77:$VZ,78:$V_,79:$V$,80:$V01,81:257},{35:[1,258],59:$V21,60:$V31,62:$V41,63:$V51,64:$V61,65:$V71,66:$V81,67:$V91,68:$Va1,69:$Vb1,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1},{32:[2,179],59:$V21,60:$V31,62:$V41,63:$V51,64:$V61,65:$V71,66:$V81,67:$V91,68:$Va1,69:$Vb1,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1},{32:[1,259]},{6:217,7:219,13:$V0,16:$Vh1,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,38:260,39:$Vi1,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},o($Vg,[2,27]),{16:[1,262],39:[1,261]},{13:$Vh,31:263,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{16:[1,265],39:[1,264]},o($Vg,[2,33]),{13:[1,266]},{6:224,7:225,13:$V0,16:$Vj1,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vk1,41:14,42:$V8,43:267,45:10,47:12,48:$V9,51:6,52:$Va,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},o($Vg,[2,39]),{16:[1,269],39:[1,268]},{16:[1,271],39:[1,270]},{32:[1,272]},o($Vg,[2,45]),o($Vg,[2,38]),{14:[1,273],52:[1,274]},o($Vg,[2,52],{54:[1,275]}),{16:[1,276]},{13:$Vh,31:277,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{88:[1,278]},{59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,88:[1,279]},{32:[1,280]},o($Vg,[2,168]),o($Vg,[2,169]),{16:[1,281]},{32:[1,282]},{35:[1,283]},{35:[2,181]},{35:[2,182]},o($Vl1,[2,93],{62:$V41,63:$V51,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1}),o($Vl1,[2,94],{62:$V41,63:$V51,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1}),o($Vl1,[2,99],{62:$V41,63:$V51,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1}),o($Vl1,[2,100],{62:$V41,63:$V51,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1}),o($Vl1,[2,101],{62:$V41,63:$V51,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1}),o($Vl1,[2,102],{62:$V41,63:$V51,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1}),o($Vl1,[2,103],{62:$V41,63:$V51,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1}),o($Vl1,[2,104],{62:$V41,63:$V51,70:$Vc1,71:$Vd1,72:$Ve1,73:$Vf1}),o([32,35,59,60,64,65,66,67,68,69,70],[2,105],{62:$V41,63:$V51,71:$Vd1,72:$Ve1,73:$Vf1}),o($Vm1,[2,106],{62:$V41,73:$Vf1}),o($Vm1,[2,107],{62:$V41,73:$Vf1}),o($Vm1,[2,108],{62:$V41,73:$Vf1}),o($Vg1,[2,109]),o($Vg1,[2,110]),o($Vg1,[2,97]),o($Vg1,[2,98]),o($Vg,[2,49]),o($Vg,[2,26]),{13:$Vh,31:284,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($Vg,[2,30]),{32:[1,285],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{13:$Vh,31:286,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($Vg,[2,32]),o($VP,[2,35]),o($Vg,[2,37]),{32:[1,287]},o($Vg,[2,43]),{32:[1,288]},o($Vg,[2,44]),{16:[1,289]},{6:66,7:67,13:$V0,16:$Vt,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vu,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,53:290,56:68,57:$Vv,58:$Vw,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},{34:[1,291]},{14:[1,292],52:[1,293]},o($Vg,[2,147]),{59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,88:[1,294]},{6:295,7:296,13:$V0,16:[2,165],17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,57:[1,297],83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},o($Vn1,[2,154],{51:6,83:7,90:8,93:9,45:10,95:11,47:12,36:13,41:14,17:15,33:16,27:17,18:25,6:298,7:299,13:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,28:$V6,29:$V7,42:$V8,48:$V9,52:$Va,57:[1,300],84:$Vb,91:$Vc,94:$Vd,96:$Ve}),{16:[1,301]},o($Vg,[2,170]),o($Vg,[2,172]),{14:[1,302]},{32:[1,303],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:[1,304]},{32:[1,305],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{16:[1,306]},{16:[1,307]},o($Vg,[2,42]),o($Vg,[2,51]),{13:$Vh,31:308,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},{6:66,7:67,13:$V0,16:$Vt,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vu,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,53:309,56:68,57:$Vv,58:$Vw,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},{34:[1,310]},o($Vn1,[2,150],{51:6,83:7,90:8,93:9,45:10,95:11,47:12,36:13,41:14,17:15,33:16,27:17,18:25,6:311,7:312,13:$V0,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,28:$V6,29:$V7,42:$V8,48:$V9,52:$Va,57:[1,313],84:$Vb,91:$Vc,94:$Vd,96:$Ve}),{16:[2,163],57:[1,314]},{16:[2,164],57:[1,315]},{32:[1,316]},o($Vn1,[2,155],{57:[1,317]}),o($Vn1,[2,156],{57:[1,318]}),{32:[1,319]},o($Vg,[2,167]),{6:321,7:323,13:$V0,16:[1,324],17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vu,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,56:322,57:$Vv,58:$Vw,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve,99:320},{16:[1,325]},o($Vg,[2,29]),{16:[1,326]},o($Vg,[2,40]),o($Vg,[2,41]),{35:[1,327],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},o($Vg,[2,53]),{13:$Vh,31:328,34:$Vi,45:61,61:$Vj,62:$Vk,63:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs},o($Vn1,[2,148],{57:[1,329]}),o($Vn1,[2,149],{57:[1,330]}),{32:[1,331]},{32:[1,332]},{32:[1,333]},{16:[2,162]},{32:[1,334]},{32:[1,335]},o($Vn1,[2,157]),o($Vg,[2,173]),{16:[1,337],39:$Vu,56:336,57:$Vv,58:$Vw},{32:[1,338]},{16:[1,339]},o($Vg,[2,178]),o($Vg,[2,28]),o($Vg,[2,31]),{14:[1,340]},{35:[1,341],59:$Vy,60:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL},{32:[1,342]},{32:[1,343]},o($Vn1,[2,153]),{16:[2,160]},{16:[2,161]},o($Vn1,[2,159]),o($Vn1,[2,158]),{32:[1,344]},o($Vg,[2,177]),{16:[1,345]},o($Vg,[2,176]),{6:66,7:67,13:$V0,16:$Vt,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vu,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,53:346,56:68,57:$Vv,58:$Vw,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},{14:[1,347]},o($Vn1,[2,151]),o($Vn1,[2,152]),{16:[1,348]},o($Vg,[2,175]),o($VO,[2,55]),{6:66,7:67,13:$V0,16:$Vt,17:15,18:25,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,27:17,28:$V6,29:$V7,33:16,36:13,39:$Vu,41:14,42:$V8,45:10,47:12,48:$V9,51:6,52:$Va,53:349,56:68,57:$Vv,58:$Vw,83:7,84:$Vb,90:8,91:$Vc,93:9,94:$Vd,95:11,96:$Ve},o($Vg,[2,174]),o($VO,[2,54])],
defaultActions: {29:[2,13],30:[2,14],31:[2,15],32:[2,16],33:[2,17],34:[2,1],70:[2,62],72:[2,65],241:[2,181],242:[2,182],316:[2,162],332:[2,160],333:[2,161]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let Prueba=require('../CshAST/Mostrar');
    let Tok = require("../Token");
    var Tokens = new Array();
    let CErrores=require('../CshAST/Errores');
    let CNodoError=require('../CshAST/NodoError');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// alv los espacios en blanco
break;
case 1:return 29;  // comentario simple línea
break;
case 2:return 28;// comentario multiple líneas
break;
case 3:return 62;
break;
case 4:return 73;
break;
case 5:return 70;
break;
case 6:return 34;
break;
case 7:return 35;
break;
case 8:return 63;
break;
case 9:return 71;
break;
case 10:return 21;
break;
case 11:return 22;
break;
case 12:return 23;
break;
case 13:return 24;
break;
case 14:return 25;
break;
case 15:return 26;
break;
case 16:return 12;
break;
case 17:return 14;
break;
case 18:return 16;
break;
case 19:return 32;
break;
case 20:return 42;
break;
case 21:return 44;
break;
case 22:return 48;
break;
case 23:return 49;
break;
case 24:return 50;
break;
case 25:return 72;
break;
case 26:return 88;
break;
case 27:return 57;
break;
case 28:return 89;
break;
case 29:return 87;
break;
case 30:return 91;
break;
case 31:return 94;
break;
case 32:return 64;
break;
case 33:return 65;
break;
case 34:return 67;
break;
case 35:return 66;
break;
case 36:return 59;
break;
case 37:return 60;
break;
case 38:return 61;
break;
case 39:return 69;
break;
case 40:return 68;
break;
case 41:return 30;
break;
case 42:return 52;
break;
case 43:return 54;
break;
case 44:return 'SALTO';
break;
case 45:return 79;
break;
case 46:return 80;
break;
case 47:return 96;
break;
case 48:return 58;
break;
case 49:return 39;
break;
case 50:return 84;
break;
case 51:return 'EAUMENTO';
break;
case 52:return 'DAUMENTO';
break;
case 53:return 'EDECREMENTO';
break;
case 54:return 'DDECREMENTO';
break;
case 55:return 78;
break;
case 56:return 77;
break;
case 57:return 100;
break;
case 58:return 101;
break;
case 59:return 76;
break;
case 60:return 74;
break;
case 61:return 75;
break;
case 62:return 13;
break;
case 63:CErrores.Errores.add(new CNodoError.NodoError("Lexico","No se esperaba el caracter: "+yy_.yytext,yy_.yylineno))
break;
case 64:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\/)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:bool\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:,)/,/^(?:class\b)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:Console\b)/,/^(?:\.)/,/^(?:Write\b)/,/^(?:%)/,/^(?::)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:[\n])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:switch\b)/,/^(?:[0-9]+.\+\+)/,/^(?:[0-9]+(\.[0-9]+).\+\+)/,/^(?:[0-9]+.--)/,/^(?:[0-9]+(\.[0-9]+).--)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:[0-9]+)/,/^(?:[A-Za-z|"_"]+[A-Za-z|0-9|"_"]*\+\+)/,/^(?:[A-Za-z|"_"]+[A-Za-z|0-9|"_"]*--)/,/^(?:[\']([^])[\'])/,/^(?:[\"]([^\"\n]|(\\|"))*[\"])/,/^(?:[\']([^\"\n]|(\\|'))*[\'])/,/^(?:[A-Za-z|"_"]+[A-Za-z|0-9|"_"]*)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaCshTrad;
exports.Parser = GramaticaCshTrad.Parser;
exports.parse = function () { return GramaticaCshTrad.parse.apply(GramaticaCshTrad, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}